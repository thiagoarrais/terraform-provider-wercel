package wercel

import (
	"context"
	"fmt"
	"os"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
	"github.com/thiagoarrais/terraform-provider-wercel/sdk"
)

func TestAccWercelEnvironmentVariable_basic(t *testing.T) {
	var variable sdk.EnvironmentVariable
	var secretUID string
	rName := acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckWercelDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccWercelEnvironmentVariable(rName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckWercelEnvironmentVariableExists("wercel_environment_variable.myvar", &variable),
					testAccCheckEquals("Unexpected variable key", func() interface{} { return variable.GetKey() }, "MYVAR"),
					testAccCheckEquals("Unexpected variable type", func() interface{} { return variable.GetType() }, "secret"),
					// captures the secret uid generated by Vercel
					func(s *terraform.State) error { secretUID = variable.GetValue(); return nil },
					resource.TestCheckResourceAttrSet("wercel_environment_variable.myvar", "secret_name"),
					resource.TestCheckResourceAttrPtr("wercel_environment_variable.myvar", "secret_uid", &secretUID),
					resource.TestCheckResourceAttr("wercel_environment_variable.myvar", "value", "the value"),
				),
			},
			{
				Config: testAccWercelEnvironmentVariable_updatedValue(rName),
				Check: resource.ComposeTestCheckFunc(
					// old secret should not exist
					// should update secret_id
					testAccCheckWercelEnvironmentVariableExists("wercel_environment_variable.myvar", &variable),
					testAccCheckWercelSecretDoesNotExist(&secretUID),
					// captures the secret uid generated by Vercel
					func(s *terraform.State) error { secretUID = variable.GetValue(); return nil },
					resource.TestCheckResourceAttrPtr("wercel_environment_variable.myvar", "secret_uid", &secretUID),
					resource.TestCheckResourceAttr("wercel_environment_variable.myvar", "value", "the updated value"),
				),
			},
		},
	})
}

func TestAccWercelEnvironmentVariable_noDanglingSecret(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckWercelDestroy,
		Steps: []resource.TestStep{
			{
				Config:      testAccWercelEnvironmentVariable_nonExistentProject(),
				ExpectError: regexp.MustCompile("404"),
				Check: resource.ComposeTestCheckFunc(
					func(s *terraform.State) error { return fmt.Errorf("Found secret!") },
				),
			},
			{
				Config: fmt.Sprintf(`provider "wercel" { token = "%s" }`, os.Getenv("VERCEL_TOKEN")),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckWercelNoDanglingSecret,
				),
			},
		},
	})
}

func testAccWercelEnvironmentVariable(name string) string {
	return fmt.Sprintf(`
provider "wercel" {
  token = "%s"
}

resource "wercel_project" "myproject" {
  name = "%s"
  repo {
    type        = "gitlab"
    project_url = "https://gitlab.com/arrais-tfvercel/hello-world"
  }
}

resource "wercel_environment_variable" "myvar" {
  project_id = wercel_project.myproject.id
  key = "MYVAR"
  value = "the value"
}
`, os.Getenv("VERCEL_TOKEN"), name)
}

func testAccWercelEnvironmentVariable_updatedValue(name string) string {
	return fmt.Sprintf(`
provider "wercel" {
  token = "%s"
}

resource "wercel_project" "myproject" {
  name = "%s"
  repo {
    type        = "gitlab"
    project_url = "https://gitlab.com/arrais-tfvercel/hello-world"
  }
}

resource "wercel_environment_variable" "myvar" {
  project_id = wercel_project.myproject.id
  key = "MYVAR"
  value = "the updated value"
}
`, os.Getenv("VERCEL_TOKEN"), name)
}

func testAccWercelEnvironmentVariable_nonExistentProject() string {
	return fmt.Sprintf(`
provider "wercel" {
  token = "%s"
}

resource "wercel_environment_variable" "myvar" {
  project_id = "non-existent"
  key = "MYVAR"
  value = "the value"
}
`, os.Getenv("VERCEL_TOKEN"))
}

// testAccCheckWercelProjectExists uses the Vercel API directly to retrieve
// the Project data, and stores it in the provided
// *sdk.Project
func testAccCheckWercelEnvironmentVariableExists(resourceName string, variable *sdk.EnvironmentVariable) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		// retrieve the resource by name from state
		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Not found: %s", resourceName)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("Environment Variable ID is not set")
		}

		projectID := rs.Primary.Attributes["project_id"]
		key := rs.Primary.Attributes["key"]

		conf := sdk.NewConfiguration()
		conf.AddDefaultHeader("Authorization", fmt.Sprintf("Bearer %s", os.Getenv("VERCEL_TOKEN")))
		sdkClient := sdk.NewAPIClient(conf)

		result, _, err := sdkClient.ProjectsApi.GetProjectEnvironmentVariables(context.Background(), projectID).Execute()
		if err != nil {
			return errorFromSDKErr(err)
		}

		for _, resultVar := range result.GetEnvs() {
			if resultVar.GetKey() == key {
				*variable = resultVar
				return nil
			}
		}

		return fmt.Errorf("Could not find variable '%s'", key)
	}
}

func testAccCheckWercelSecretDoesNotExist(secretUID *string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		conf := sdk.NewConfiguration()
		conf.AddDefaultHeader("Authorization", fmt.Sprintf("Bearer %s", os.Getenv("VERCEL_TOKEN")))
		sdkClient := sdk.NewAPIClient(conf)

		_, resp, err := sdkClient.SecretsApi.GetSecret(context.Background(), *secretUID).Execute()
		if err != nil && resp.StatusCode != 404 {
			return errorFromSDKErr(err)
		}
		if err == nil {
			return fmt.Errorf("Secret '%s' should be gone by now, but still exists in Vercel", *secretUID)
		}
		return nil
	}
}

func testAccCheckWercelNoDanglingSecret(s *terraform.State) error {
	conf := sdk.NewConfiguration()
	conf.AddDefaultHeader("Authorization", fmt.Sprintf("Bearer %s", os.Getenv("VERCEL_TOKEN")))
	sdkClient := sdk.NewAPIClient(conf)

	result, _, err := sdkClient.SecretsApi.ListSecrets(context.Background()).Execute()
	if err != nil {
		return errorFromSDKErr(err)
	}

	if len(result.GetSecrets()) > 0 {
		return fmt.Errorf("Found dangling secrets after apply.")
	}

	return nil
}
