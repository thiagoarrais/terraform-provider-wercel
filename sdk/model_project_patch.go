/*
 * Vercel API
 *
 * Unnofficial OpenAPI description for the Vercel API
 *
 * API version: 0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// ProjectPatch struct for ProjectPatch
type ProjectPatch struct {
	Name          *string        `json:"name,omitempty"`
	RootDirectory NullableString `json:"rootDirectory"`
}

// NewProjectPatch instantiates a new ProjectPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectPatch(rootDirectory NullableString) *ProjectPatch {
	this := ProjectPatch{}
	this.RootDirectory = rootDirectory
	return &this
}

// NewProjectPatchWithDefaults instantiates a new ProjectPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectPatchWithDefaults() *ProjectPatch {
	this := ProjectPatch{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectPatch) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPatch) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectPatch) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectPatch) SetName(v string) {
	o.Name = &v
}

// GetRootDirectory returns the RootDirectory field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectPatch) GetRootDirectory() string {
	if o == nil || o.RootDirectory.Get() == nil {
		var ret string
		return ret
	}

	return *o.RootDirectory.Get()
}

// GetRootDirectoryOk returns a tuple with the RootDirectory field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPatch) GetRootDirectoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootDirectory.Get(), o.RootDirectory.IsSet()
}

// SetRootDirectory sets field value
func (o *ProjectPatch) SetRootDirectory(v string) {
	o.RootDirectory.Set(&v)
}

func (o ProjectPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["rootDirectory"] = o.RootDirectory.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProjectPatch struct {
	value *ProjectPatch
	isSet bool
}

func (v NullableProjectPatch) Get() *ProjectPatch {
	return v.value
}

func (v *NullableProjectPatch) Set(val *ProjectPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectPatch(val *ProjectPatch) *NullableProjectPatch {
	return &NullableProjectPatch{value: val, isSet: true}
}

func (v NullableProjectPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
