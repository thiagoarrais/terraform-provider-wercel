/*
 * Vercel API
 *
 * Unnofficial OpenAPI description for the Vercel API
 *
 * API version: 0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// TargetEnvironment the model 'TargetEnvironment'
type TargetEnvironment string

// List of TargetEnvironment
const (
	DEVELOPMENT TargetEnvironment = "development"
	PREVIEW     TargetEnvironment = "preview"
	PRODUCTION  TargetEnvironment = "production"
)

func (v *TargetEnvironment) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetEnvironment(value)
	for _, existing := range []TargetEnvironment{"development", "preview", "production"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetEnvironment", value)
}

// Ptr returns reference to TargetEnvironment value
func (v TargetEnvironment) Ptr() *TargetEnvironment {
	return &v
}

type NullableTargetEnvironment struct {
	value *TargetEnvironment
	isSet bool
}

func (v NullableTargetEnvironment) Get() *TargetEnvironment {
	return v.value
}

func (v *NullableTargetEnvironment) Set(val *TargetEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetEnvironment(val *TargetEnvironment) *NullableTargetEnvironment {
	return &NullableTargetEnvironment{value: val, isSet: true}
}

func (v NullableTargetEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
