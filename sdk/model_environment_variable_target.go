/*
 * Vercel API
 *
 * Unnofficial OpenAPI description for the Vercel API
 *
 * API version: 0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// EnvironmentVariableTarget - struct for EnvironmentVariableTarget
type EnvironmentVariableTarget struct {
	TargetEnvironment     *TargetEnvironment
	TargetEnvironmentList *[]TargetEnvironment
}

// TargetEnvironmentAsEnvironmentVariableTarget is a convenience function that returns TargetEnvironment wrapped in EnvironmentVariableTarget
func TargetEnvironmentAsEnvironmentVariableTarget(v *TargetEnvironment) EnvironmentVariableTarget {
	return EnvironmentVariableTarget{TargetEnvironment: v}
}

// TargetEnvironmentListAsEnvironmentVariableTarget is a convenience function that returns []TargetEnvironment wrapped in EnvironmentVariableTarget
func TargetEnvironmentListAsEnvironmentVariableTarget(v *[]TargetEnvironment) EnvironmentVariableTarget {
	return EnvironmentVariableTarget{TargetEnvironmentList: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EnvironmentVariableTarget) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TargetEnvironment
	err = json.Unmarshal(data, &dst.TargetEnvironment)
	if err == nil {
		jsonTargetEnvironment, _ := json.Marshal(dst.TargetEnvironment)
		if string(jsonTargetEnvironment) == "{}" { // empty struct
			dst.TargetEnvironment = nil
		} else {
			match++
		}
	} else {
		dst.TargetEnvironment = nil
	}

	// try to unmarshal data into []TargetEnvironment
	err = json.Unmarshal(data, &dst.TargetEnvironmentList)
	if err == nil {
		jsonTargetEnvironmentList, _ := json.Marshal(dst.TargetEnvironmentList)
		if string(jsonTargetEnvironmentList) == "{}" { // empty struct
			dst.TargetEnvironmentList = nil
		} else {
			match++
		}
	} else {
		dst.TargetEnvironmentList = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TargetEnvironment = nil
		dst.TargetEnvironmentList = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(EnvironmentVariableTarget)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(EnvironmentVariableTarget)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EnvironmentVariableTarget) MarshalJSON() ([]byte, error) {
	if src.TargetEnvironment != nil {
		return json.Marshal(&src.TargetEnvironment)
	}

	if src.TargetEnvironmentList != nil {
		return json.Marshal(&src.TargetEnvironmentList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EnvironmentVariableTarget) GetActualInstance() interface{} {
	if obj.TargetEnvironment != nil {
		return obj.TargetEnvironment
	}

	if obj.TargetEnvironmentList != nil {
		return obj.TargetEnvironmentList
	}

	// all schemas are nil
	return nil
}

type NullableEnvironmentVariableTarget struct {
	value *EnvironmentVariableTarget
	isSet bool
}

func (v NullableEnvironmentVariableTarget) Get() *EnvironmentVariableTarget {
	return v.value
}

func (v *NullableEnvironmentVariableTarget) Set(val *EnvironmentVariableTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentVariableTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentVariableTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentVariableTarget(val *EnvironmentVariableTarget) *NullableEnvironmentVariableTarget {
	return &NullableEnvironmentVariableTarget{value: val, isSet: true}
}

func (v NullableEnvironmentVariableTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentVariableTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
